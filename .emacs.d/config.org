* My emacs config
 
** Install packages
   #+begin_src emacs-lisp
     (require 'package)
     (package-initialize)
     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			      ("melpa" . "https://melpa.org/packages/")))

     (unless package-archive-contents
       (package-refresh-contents))

     ;; install use-package if it's not installed
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     ;; always ensure packages are installed
     (require 'use-package-ensure)
     (setq use-package-always-ensure t)

     ;; packages
     (use-package modus-themes
       :init
       (setq modus-themes-slanted-constructs t
	     modus-themes-bold-constructs t)
       (modus-themes-load-themes)
	     :config
	     (modus-themes-load-vivendi))

     ;; programming

     (use-package go-mode)
     (use-package python-mode)
     (use-package haskell-mode)
     (use-package rust-mode)

     ;; add other modes
     (use-package reformatter)
     (use-package eglot) ;; lsp client
     (use-package emmet-mode)
     (use-package magit) ; an interface to git
     (use-package htmlize)

   #+end_src
   
** Quality of life
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  ;; disable tool, menu and scroll bar
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; function to reload configuration
  (defun config-reload ()
      (interactive)
      (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  ;; refresh buffer when file is modified on disk
  (global-auto-revert-mode 1)

  ;; font
  (add-to-list 'default-frame-alist
	       '(font . "Fira Code Retina-14"))
#+end_src
** Writing
*** Spellcheck
    #+begin_src emacs-lisp
      (setq ispell-program-name "aspell")
      (setq ispell-personal-dictionary "~/.config/.aspell.en.pws")
      ;; enable spellcheck in all text-mode
      (add-hook 'text-mode-hook 'flyspell-mode)
      ;; enable spellcheck for comments in prog-mode
      (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    #+end_src
** Programming
*** Code formatting
    #+begin_src emacs-lisp
      (require 'reformatter)
      ;; go
      (setq go-format-command "gofmt")
      (reformatter-define go-format
	:program go-format-command
	:lighter " GF")

      ;; py 
      (setq py-format-command "black")
      (reformatter-define py-format
	:program py-format-command
	:args '("")
	      :lighter " PF")

      ;; go 
      (setq hs-format-command "hsfmt")
      (reformatter-define hs-format
	:program hs-format-command
	:args '("format")
	:lighter " HF")

      ;; rust 
      (setq rust-format-command "rustfmt")
      (reformatter-define rust-format
	:program rust-format-command
	:args '("format")
	:lighter " RF")

      ;; c 
	    (setq c-format-command "cfmt")
      (reformatter-define c-format
	:program c-format-command
	:args '("format")
	:lighter " CF")

      ;; cpp 
      (setq cpp-format-command "cppfmt")
      (reformatter-define cpp-format
	:program cpp-format-command
	:args '("format")
	:lighter " CPPF")

      ;; hooks
      ;; find a way to do these programmatically 
      (add-hook 'go-mode-hook 'go-format-on-save-mode)
      (add-hook 'prog-mode-hook 'py-format-on-save-mode)
    #+end_src
** Keybindings
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c c") 'org-capture)
     (global-set-key (kbd "C-c r") 'config-reload)
     (global-set-key (kbd "M-<f2>") 'modus-themes-toggle) ; toggle light and dark modus themes
     (global-unset-key (kbd "C-z"))
     (global-set-key (kbd "C-x g") 'magit-status)
   #+end_src


